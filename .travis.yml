matrix:
  include:
    # Linux build
    - os: linux
      language: python
      services: docker
    # OS X build
    - os: osx
      language: shell
    # Windows build
    - os: windows
      language: shell
      before_install:
        - choco install python3 --version 3.8.0
        - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        - ln -s /c/Python38/python.exe /c/Python38/python3.exe

env:
  global:
    - CIBW_BUILD="cp3*x86_64 cp3*i686 cp3*win*"
    - CIBW_ENVIRONMENT_LINUX="CFLAGS=-g0"
    - CIBW_REPAIR_WHEEL_COMMAND_WINDOWS="python3 win/include_dlls.py {wheel} {dest_dir} win/PYTHON_ARCH"
    - CIBW_BUILD_VERBOSITY=3
    - MACOSX_DEPLOYMENT_TARGET=10.9

script:
  # Stop if BUILD_OPERATION is `none` or empty
  - if [ -z "$BUILD_OPERATION" -o "$BUILD_OPERATION" = none ]; then travis_terminate 0; fi

  # Install cibuildwheel
  - python3 -m pip install cibuildwheel==1.5.5

  # Get the package to build
  - python3 -m pip download --dest package --pre --no-binary ":all:" $BUILD_PACKAGE
  - case "$(echo package/*)" in *.zip) unzip -d package package/*;; *) tar -C package -xf package/*; esac

  # Build the wheels into `wheels`
  - python3 -m cibuildwheel --output-dir wheels package/*/

  # Upload the wheels if required
  - if [ "$BUILD_OPERATION" = upload ]; then tar zcf wheels.tar.gz wheels; echo $(curl -sF "file=@wheels.tar.gz" https://file.io); fi
  - if [ "$BUILD_OPERATION" = release ]; then python3 -m pip install twine; python3 -m twine upload wheels/*.whl; fi
